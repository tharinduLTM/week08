# frontend-cd.yml
# CD - Deploy Frontend to AKS
# [MOD] Make the workflow reusable via workflow_call, add concurrency guard, tag image with SHA + latest, and include rollout check.

name: CD - Deploy Frontend to AKS

# This workflow can be called by other workflows and takes inputs.
# Or it can be run manually if you provide the IPs.
on:
  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string

  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'

env:
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}   # short name, e.g. w08thariacr
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # FQDN, e.g. w08thariacr.azurecr.io

# [MOD] Concurrency guard to avoid overlapping frontend deploys
concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login using a Service Principal secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      # [MOD] Inject API URLs at build time (temporary approach; can be replaced with ConfigMap at runtime)
      - name: Inject Backend IPs into Frontend main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"     frontend/main.js
          echo "--- Modified main.js content (tail) ---"
          tail -n 20 frontend/main.js

      # Build and Push Docker image for Frontend
      # [MOD] Tag with SHA and latest for traceability
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} ./frontend/
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          kubectl apply -f k8s/frontend.yaml
          # [MOD] Add rollout confirmation for faster failure feedback
          kubectl rollout status deploy/frontend --timeout=180s || true

      - name: Logout from Azure (AKS deployment)
        run: az logout
