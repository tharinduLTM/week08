name: CD â€” Deploy Frontend to AKS

on:
  workflow_call:
    inputs:
      product_api_ip:     { type: string, required: true }
      order_api_ip:       { type: string, required: true }
      aks_cluster_name:   { type: string, required: true }
      aks_resource_group: { type: string, required: true }
  workflow_dispatch:
    inputs:
      product_api_ip:     { description: 'http://X.X.X.X:8000', required: true }
      order_api_ip:       { description: 'http://Y.Y.Y.Y:8001', required: true }
      aks_cluster_name:   { description: 'AKS name', required: true }
      aks_resource_group: { description: 'AKS resource group', required: true }

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

env:
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # or OIDC later

      - name: ACR login
        run: az acr login --name ${{ env.ACR_NAME }}

      # Temporary: inject API URLs at build time
      - name: Inject API URLs
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"     frontend/main.js
          echo "----- main.js after injection -----"
          tail -n +1 frontend/main.js

      - name: Build & Push Frontend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} ./frontend/
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Deploy frontend
        run: |
          kubectl apply -f k8s/frontend.yaml
          # rollout name may differ; show resources for evidence
          kubectl get deploy,svc,pods -n default || true
