name: CD â€” Deploy Backend to AKS (and trigger Frontend)

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name: { description: 'AKS name', required: true }
      aks_resource_group: { description: 'AKS resource group', required: true }
      namespace: { description: 'K8s namespace', required: true, default: 'w08' }
      product_service_name: { description: 'K8s Service name for product API', required: true, default: 'product-service-w08e1' }
      order_service_name:   { description: 'K8s Service name for order API',   required: true, default: 'order-service-w08e1' }

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}   # short name, e.g., w08thariacr
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # e.g., w08thariacr.azurecr.io

jobs:
  deploy_backends:
    runs-on: ubuntu-latest
    outputs:
      product_api_ip: ${{ steps.capture.outputs.product_ip }}
      order_api_ip:   ${{ steps.capture.outputs.order_ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # or switch to OIDC later

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Ensure namespace exists
        run: |
          kubectl get ns ${{ inputs.namespace }} >/dev/null 2>&1 || kubectl create ns ${{ inputs.namespace }}

      - name: Attach ACR to AKS (idempotent)
        run: |
          az aks update \
            --name ${{ inputs.aks_cluster_name }} \
            --resource-group ${{ inputs.aks_resource_group }} \
            --attach-acr ${{ env.ACR_NAME }}

      - name: Apply config and services
        run: |
          kubectl -n ${{ inputs.namespace }} apply -f k8s/configmaps.yaml
          kubectl -n ${{ inputs.namespace }} apply -f k8s/secrets.yaml
          kubectl -n ${{ inputs.namespace }} apply -f k8s/product-db.yaml
          kubectl -n ${{ inputs.namespace }} apply -f k8s/order-db.yaml
          kubectl -n ${{ inputs.namespace }} apply -f k8s/product-service.yaml
          kubectl -n ${{ inputs.namespace }} apply -f k8s/order-service.yaml

      # We don't assume exact Deployment names/labels; list for evidence
      - name: List deployments/services/pods
        run: |
          kubectl -n ${{ inputs.namespace }} get deploy
          kubectl -n ${{ inputs.namespace }} get pods -o wide
          kubectl -n ${{ inputs.namespace }} get svc

      - name: Wait for LoadBalancer IPs
        id: capture
        env:
          PRODSVC: ${{ inputs.product_service_name }}
          ORDERSVC: ${{ inputs.order_service_name }}
        run: |
          echo "Waiting for External IPs on $PRODSVC and $ORDERSVC ..."
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl -n ${{ inputs.namespace }} get svc "$PRODSVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl -n ${{ inputs.namespace }} get svc "$ORDERSVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "product_ip=$PRODUCT_IP" >> $GITHUB_OUTPUT
              echo "order_ip=$ORDER_IP"     >> $GITHUB_OUTPUT
              break
            fi
            sleep 5
          done
          [[ -z "${PRODUCT_IP}" || -z "${ORDER_IP}" ]] && { echo "LB IPs not ready"; exit 1; }

  deploy_frontend:
    needs: deploy_backends
    uses: ./.github/workflows/frontend-cd.yml
    with:
      product_api_ip: http://${{ needs.deploy_backends.outputs.product_api_ip }}:8000
      order_api_ip:   http://${{ needs.deploy_backends.outputs.order_api_ip }}:8001
      aks_cluster_name: ${{ inputs.aks_cluster_name }}
      aks_resource_group: ${{ inputs.aks_resource_group }}
    secrets: inherit
