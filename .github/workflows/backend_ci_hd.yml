name: Backend CI (10.3HD) — Tests+Coverage Gate, Trivy, SBOM, Push

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/backend_ci_hd.yml"

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test_and_cover:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
      order_db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports: [ "5433:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Product Service tests + coverage gate
      - name: Install deps (product_service)
        working-directory: backend/product_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt pytest-cov
      - name: Tests + coverage gate (product_service)
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=app --cov-report=term-missing --cov-fail-under=70

      # Order Service tests + coverage gate
      - name: Install deps (order_service)
        working-directory: backend/order_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt pytest-cov
      - name: Tests + coverage gate (order_service)
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5433"
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=app --cov-report=term-missing --cov-fail-under=70

  build_scan_push:
    runs-on: ubuntu-latest
    needs: test_and_cover
    permissions:
      contents: read
      security-events: write   # needed to upload SARIF
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Derive ACR name
        id: acr
        run: echo "name=$(echo '${{ env.ACR_LOGIN_SERVER }}' | cut -d. -f1)" >> $GITHUB_OUTPUT

      - name: Docker login to ACR
        run: az acr login --name ${{ steps.acr.outputs.name }}

      - name: Build images
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}   ./backend/order_service

      # ===== Trivy: gate (table, fail on HIGH/CRITICAL) + SARIF (always upload) =====
      # -------- product_service --------
      - name: Trivy gate — product_service
        id: trivy_gate_product
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          format: table
          vuln-type: os,library
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: "1"

      - name: Trivy SARIF — product_service
        if: always()
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          format: sarif
          output: trivy-product.sarif
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          exit-code: "0"

      - name: Upload SARIF (product)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-product.sarif
          category: trivy-product

      # -------- order_service --------
      - name: Trivy gate — order_service
        id: trivy_gate_order
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          format: table
          vuln-type: os,library
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: "1"

      - name: Trivy SARIF — order_service
        if: always()
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          format: sarif
          output: trivy-order.sarif
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          exit-code: "0"

      - name: Upload SARIF (order)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-order.sarif
          category: trivy-order

      # SBOM artifacts (CycloneDX)
      - name: SBOM — product
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          artifact-name: sbom-product.cdx.json
      - name: SBOM — order
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          artifact-name: sbom-order.cdx.json

      # Only push if both gates passed
      - name: Push images (immutable + moving tag)
        if: ${{ steps.trivy_gate_product.outcome == 'success' && steps.trivy_gate_order.outcome == 'success' }}
        run: |
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/product_service:testing-latest
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}   ${{ env.ACR_LOGIN_SERVER }}/order_service:testing-latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:testing-latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:testing-latest

      # # Fail the job at the end if any Trivy gate failed (so PRs are blocked) — after reports are uploaded
      # - name: Fail if any Trivy gate failed
      #   if: ${{ steps.trivy_gate_product.outcome != 'success' || steps.trivy_gate_order.outcome != 'success' }}
      #   run: |
      #     echo "::error::Trivy gate failed (HIGH/CRITICAL). See SARIF artifacts in this run."
      #     exit 1
